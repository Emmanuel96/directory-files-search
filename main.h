#ifndef main_H
#define main_H

#include <iostream>
#include <dirent.h>
#include <cstring>
#include <vector>
#include <fstream>
#include <filesystem>
#include <algorithm>

using namespace std;

vector<string> listDirectories(string dirPath, vector<string> fileList);
string checkPathString( string strPath);
vector<string> searchFiles( vector<string> fileList, string targetWord, vector<string> filesContaining, int index=0);
bool FileLinearSearch(fstream& file, string fileContent, string targetWord);
void printResult(vector<string> result, string targetWord);
void printVector(vector<string> vec, int index=0);


/*  this function fetches the names(filepaths) of all the files in the directory and subdirectories
    parameters: dirPath => a directory path to read
                fileList => a predefined container to store the name of the files into
    
    returns: the same container(fileList) after pushing the filenames into it. */
vector<string> listDirectories(string dirPath, vector<string> fileList){
    struct dirent *dir;
    DIR *dp = opendir(dirPath.c_str());
    if(dp){
        while((dir=readdir(dp)) != NULL){
            string strPath = "";
            if(strcmp(dir->d_name,".") == 0 || strcmp(dir->d_name, "..") == 0) continue;
            if(dir->d_type == DT_DIR){
                dirPath = checkPathString(dirPath);
                strPath = dirPath + "/" +dir->d_name;
                fileList = listDirectories(strPath, fileList);
            }else{
                dirPath = checkPathString(dirPath);
                strPath = dirPath + "/" +dir->d_name;
                fileList.push_back(strPath);
            }
        }
        closedir(dp);
    }
    return fileList;
}


string checkPathString( string strPath){
    if(strPath[strPath.length()-1] == '/'){
        strPath = strPath.substr(0, strPath.length()-1);
    }
    return strPath;
}


/*  this function iterates through the generated file list, searching each valid one for the target word by invoking
    the FileLinearSearch function bellow
    parameters: fileList => a list of files i.e the list of files as generated by the listDirectory fuction above
                targetWord => the target word to search for (to be forwarded to FileLinearSearch)
                filesContaining => a predefined container in which to store the names of files where the target word has been found
                index => the iteration index. Starts at zero by default as specified in the function enumeration above
    
    returns: the same container(filesContaining) after pushing the filenames where the word was found into it. */
vector<string> searchFiles(vector<string> fileList, string targetWord, vector<string> filesContaining, int index){
    if(index == fileList.size()){
        return filesContaining;
    } 
    filesystem::path fileName = fileList[index];
    
    fstream file;
    file.open(fileName, ios::in);
    if(!file){
        cout << ("failed to open file %s\n", fileName) << endl;
        filesContaining = searchFiles(fileList, targetWord, filesContaining, index+=1);
    }
    string fileContent;
    // search
    bool wordFound = FileLinearSearch(file, fileContent, targetWord);
    if(wordFound){
        filesContaining.push_back(fileName.string());
    }
    filesContaining = searchFiles(fileList, targetWord, filesContaining, index+=1);
    return filesContaining;
}


// Linear search a file for a target word
bool FileLinearSearch(fstream& file, string fileContent, string targetWord){
    if(file.eof()){
        return false;
    }
    file >> fileContent;
    if(fileContent.compare(targetWord) == 0){
        return true;
    }else{
        return FileLinearSearch(file, fileContent, targetWord);
    }
}

/*function to style the output and pretty print out the result set 
  parameters: result => the result set i.e the list of files where the target word exists
              targetWOrd=> the target word
*/
void printResult(vector<string> result, string targetWord){
        if(!(result.size() == 0)){
        cout << "____________________" << endl;
        cout << ("Target word '"+targetWord+"' found in: ") << endl;
        printVector(result);
        cout << "____________________" << endl;
    }else{
        cout << "____________________" << endl;
        cout << "Word not found." << endl;
        cout << "____________________" << endl;
    }
}


// function to print out vector list elements each on a seperate line
void printVector(vector<string> vec, int index){
    if(index == vec.size()) return;
    cout << vec[index] << endl;
    printVector(vec, index+=1);
}


#endif